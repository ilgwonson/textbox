1종 함수 : 함수의 인자나 리턴값으로 함수를 사용 할수있는 개념

● 코어 자바스크립트
    - 대소문자 구분
    - 식별자 처음 _, $, 영어만 가능, 유니코드의 모호한 카테고리인 π같은 Mn,Mc,Pc에 속한 문자도 사용 가능
    - 예약어 : 시스템에서 이미 사용중인 식별자 ex)if,case,break
    - javascript는 알어서 ;을 처리해줌 조심해야될 부분
        return
        true;
        는
        return; true;로 인식된다.
    - 0xaa 16진수, 034 8진수
    - 표현할수 없는 큰수는 Infinity로 표현
    - 부동소수점은 소수를 정확하게 표현하는데 한계가 있다.
    - Escape 시퀀스 ex) \n , \t \'
    - 문자열 메서드는 기존 문자열을 변경하지 않는다.
    - null에 typeof 연산자를 사용하면 object로 나온다. 값이 없음을 나타내는 object같은 모습이다. 실재로는 객체처럼 쓰이지 않는다.
    - undefined가 나오는 경우
        초기화 되지 않은 변수
        존재 하지 않는 객체 프로퍼티 및 배열 원소값
        반환값 없는 함수의 반환값
        실인자가 전달 되지 않은 형식인자의 값(arguments)
    - 예기치 않은 값의 부재에는 undefined를, 에상 가능할때는 null로 조건문을 만든다.
    - string, number, boolean . 연산자에 의해 자동으로 임시 래퍼겍체로 형변환 된다. 임시겍체는 사용후 바로 삭제된다.
    - parseint와 parseFloat 은 처음의 공백과 숫자 뒤에 오는 문자들은 무시한다.
    - new Date() + 1 에서 date는 숫자로 형변환이 안되고 문자로 형변환됨 데이트 객체의 특징, 그렇게 date를 문자형으로 형변환을 먼저하는 연산자로는  == ,!= 가 있음.(보통 객체는 숫자로 먼저 형변환)
    - var 없이 변수를 선언할 경우
        엄격모드는 에러를 발생한다.
        비엄격모드는 전역객체 (window) 속성으로 선언된다.
    - 호이스팅 유효범위(funtion scope)내에 선언된 변수는 어느 위치든 전체에 걸쳐 유효하다. 값이 대입되기전 위치에서는 undefined로(error가 아니다)
    - 전역스코프에서 var 로 선언한 변수는 전역객체의 프로퍼티가 되고 delete연산으로 삭제가 불가능 하다.
    - undefined 는 전역변수다 null 처럼 키워드가 아니다.
    - 함수에서 this가 엄격모드일 경우에는 undefined, 아닐경우에는 window가 된다.
    - 3항, 할당, 단항연산자는 연산자들의 결합방향이 오른쪽에서 왼쪽
    - NaN === NaN 은 false 다. isNaN으로 검사
    - 자바스크립트 스프링은 16비트 유니코드(ASCII)
    - 비교 연산자중 하나라도 NaN이면 무조건 false
    - 단축평가(short-circuiting) && || 연산
    - eval에 매개변수로 전달되는 코드를 평가하기 힘들다. var f = eval 처럼 eval의 이름을 바꾸면 안전하게 사용할수가 없다.
    - eval의 이름바꿔서 실행하면 전역객체스코프에서 실행된다. 지역변수를 접근하지 못한다. ie 는 제외
    - 엄격모드 eval은 지역변수와 전역변수 모두 접근 못하고 자신만의 스코프를 가진다.
    - delete로 삭제 못하는 것들
        var 로 선언된 변수
        내장 코어 프로퍼티나 클라이언트측 프로퍼티
        function 및 function 매개변수
    - 함수 선언은 if문이나 while문 등의 안에 올수 없다.
    - switch는 일치 연산자가 사용된다.
    - for(var a in o)로 객체 프로퍼티 순환을 할때, ECMAscript는 열거 순서를 명시 하지 않는다. 하지만 대부분의 브라우저는 정의된 순서대로 나열한다.
    - for in 루프는 프로퍼티를 어떤 순서로 순회해야 하는지 정해져 있지 않다.
    - 엄격모드 요약
        with 사용금지
        변수 반드시 선언, 자동으로 전역객체의 프로퍼티가 되지 않음
        함수안의 this는 undefined
        eval롤 변수를 선언하거나 함수를 선언하면 에발안에서만 유효하다.
        8진수를 사용할수 없다.
        eval과 arguments를 바꿀수 없다.
        argumnets.caller와 callee 사용금지(arguments.callee는 함수 자신 arguments.caller는 자신을 호출한 함수)
    - Object.defineProperty, Properties를 이용하여 속성의 읽기모드와 열거, 수정가능을 결정한다.
    - JSON stringfy는 NaN, infinity는 null로 바꾼다. date는 문자열로 바꾸고 function,regExp,Error객체와 undefined는 복원할수 없다.
    - 객체 장은 다시 읽어 보기
    - [,,,] 은 0 in array 값이 true 지만 new Array(10)은 false이다. 희소배열
    - 배열의 length 값을 변경하면 바뀐부분은 삭제된다.
    - reverse 와 sort 대상 배열 자체를 바꾼다.
    - sort(function(a,b){return ??})의 매개변수 함수에서 - 를 리턴하면 매개변수 순서 그대로 +를 리턴하면 역순 0은 그대로 이다.
    - forEach문은 break이 안되고, 그런 기능을 하려면 try 블록문 안에서 예외를 발생 시켜야 한다.
    - instanceOf 프레임(새창, iframe)이 여러개일때 오류 발생 가능성 있음
    - 스트링은 아래처럼 변경 안됨
        var a = "string";
        for(var i=0;i<a.length;i++){
            a[i] = "d";
        }
        console.log(a) // 'string' 출력
    - arguments는 유사 배열 객체
    - varags 함수 : 임의의 매개변수를 받을수 있는 함수를 일컫는말
    - 매개변수의 값을 바꾸면 arguments의 값도 바뀐다 (반대도 동일) - 비엄격모드
    - function의 바인드는 파셜어플리케이션, 커링 기능이 있다.
    - function 생성자는 익명 함수를 생성한다.
    - 고차함수 : 하나이상의 함수를 받고 새함수를 리턴해주는 함수
    - 캐싱방식 : 메모이제이션
    - prototype을 extend로 확장하지 않으면 constructor가 삭제된다. ex)a.prototype = {}
    - 덕타이핑
        여러 실행 콘텍스트(프레임)이 있는 경우에는 생성자 함수의 사본이 여러개 존재 하고 , 이함수들이 같아 보일수는 있지만 엄연히 다르다.
        덕타이핑은 객체가 어떤 메서드를 구현하는지 테스트하여 객체를 판단한다.
    - private
        function Range(from,to){
            this.from = function(){ return from};
            this.to = function(){return to};
        }
    - 네임 스페이스란 모듈들의 충돌을 막기 휘한것으로, 보통 하나의 전역변수를 정해 그 안에 함수와 변수를 다 선언하는 것이 좋다. 모듈은 도메인을 거꾸로 하면 유니크하게 유지 할수 있다.
    - 정규식의 m은 여러줄일때 줄마다 ^,$ 앵커가 적용되도록 한다.
    - 자바스크립트 안에 < & 문자가 있다면
        <script><![CDATA[]
        // 여기에 코드 작성
        }}></script>
    - a href에 javascript가 실행될경우 void값을 사용해 문서가 바뀌는경우가 없도록 한다.
    - 자바스트릭 동작 두단계
        처음에는 script요소 들을 순서대로 실행한다.
        두번째는 이벤트를 중심으로 비동기적으로 실행된다.
    - defer는 문서가 모두 파싱될때까지 스크립트 실행을 멈추고, async는 문서 파싱과 스크립트가 동시에 실행되고 가급적 빨리 스크립트를 실행한다.
    - async 속성으로 비동기 실행되는 스크립트는 원래 순서와 상관 없이 불러오는 대로 실행된다.
    - 자바스크립트 실행 순서
        element 객체와 text노드를 웹페이지 문서에 추가 document.readyState = loading
        스크립트를 동기 모드로 불러와 실행
        문서 분석이 완료 되면 readystate = interacitive가 되고 defer 스크립트 실행(문서 로딩이 완료되고 상호작용이 가능할때)
        DOMContentLoaded 이벤트 (이벤트 주도 단계)
        이미지등의 로드 -> readystate = complete -> window.onload 발생
    - 기능 테스트 : 브라우저가 어던 기능을 지원하는지 확인
    - 브라우저 스니퍼, 클라인어느 스니퍼 : navigator.userAgent를 통해 어느 브라우저를 사용하는지 체크하는 것
    - 조건부 주석 <!--[if IE8]>, /*@cc_on
    - 자바스크립트는 스크립트를 포함하고 있는 문서와 같은 출처의 문서에 있는 window와 document에만 접급이 가능하다.
    - 보안 다시 읽기(p408)
    - location.search : url의 ? 뒷부분
    - location.hash : url의 # 뒷부분
    - location.replace는 히스토리를 지운다.
    - 숨겨진 아이프레임에 상태정보를 저장해놓아서 히스토리 이동시 사용한다.
    - 문서의 아이디가 키워드일 경우는 document.id로 접근 불가능 getElementById를 사용하여야 함
    - name은 중복될 경우 암묵적으로 유사배열형태로 바뀐다.
    - window.frameElement는 자기가 프레임이 아니면 null 이다.
    - getElementById는 ie8이하에서는 id의 대소문자를 구분하지 않고, name속성과 일치해도 반환한다.
    - HTMLCollection : document.images, document.forms, document.links
    - children 사용하기 : childNodes는 text노드,주석노드까지 포함됨 주의 ie6~8은 주석노드가 포함됨
        firstElementChild, lastElementChild
        nextElementSibling, preivousElementSibling
        childElementCount
    - html 속성은 대소문자를 구분하지 않지만 javascript는 구분한다.
    - html의 비표준 속성을 저장할때는 getAttribute와 setAttribute사용
    - hasAttribute, removeAttribute
    - data-juqery-test 속성은 dataset.jqueryTest
    - window.pageXOffset을 먼저 사용하고 없을 경우 document.documentElement.scrollLeft 사용 쿼크모드일 경우는 document.body.scrollLeft 사용
    - getBoundingClientReact 뷰포트 기준의 좌표
    - onsubmit은 submit()함수가 실행될때는 발생하지 않는다.
    - option option객체로 생성하여 옵션 배열에 넣어 줘야 한다.
    = css로 설정한값들 javascript style로 읽을수 없다.
        window.getComputedStyle 사용
        ie8이하 currentStyle 사용
        getAttribute("style") 사용
        e.style.cssText 사용
    - mousedown -> mouseup -> click
    - 오른쪽 버튼 oncontextmenu 이벤트
    - mouseout 자식으로의 버블링을 구분하지 못함 mouseleave와 enter는 버블링을 차단
    - gesture 이벤트를 통해 다양한 터치 동작 이벤트를 설정할수 있다.
    - ie8이하버전 때문에 event = event || window.event (addEventListener나 attachEvent 안쓸경우)
    - 이벤트 호출 순서
        객체의 프로퍼티나 html 속성의 핸들러를 가장 먼저 호출
        addEventListner 등록된 순서로 호출
        attachEvent는 알수 없는 순서로 실행됨
    - addEventListener 에 들어가는 세번제 매개변수를 true로 하면 캡쳐링 과정을 트루로 만들고 그 과정은 버블링의 역순이다.
    - ie9 이하 window.event.returnValue= false; window.cancelBubble = true;
    - char코드 문자열로 바꾸기 String.fromCharCode 사용
    - keypress는 ctrl과 alt같이 출력된 문자가 없는 키입력도 이벤트가 발생(파이어폭스)
    - keycode의 값은 언제나 대문자의 값
    - comet은 서버가 클라이언트에 비동기적으로 메시지를 보냄
    - script 요소를 활용한 http 스크립팅은 크로스 도메인 통신을 가능하게 함(jsonp)
    - xmlhtttprequest의 open메서드 세번째 인자를 false로 지정하면 동기식으로 아작스를 전송
    - $(function(){})에서 this 는 document 이다.
    - animate의 queue 속성을 true로하면 애니메이션을 실행 대기열에 담는다. 메서드 체이닝때 순차적으로 됨
    - css 결합연산자 : 요소간의 관계를 나타냄 A B, A>B A+B, A~B
    - jquery filter 선택자 좋음
    - find ,contents 이런것들은 선택자 스택을 생성한다. end()를 쓰면 예전으로 돌아간다.
    - 웹스토리지는 서로 다른브라우저로 접근할시 처음에 데이터를 못 읽어 온다.(파이어폭스로 방문한 싸이트를 크롬으로 재방문하게 되면)
    - 웹스트로지는 값을 읽을때 복제본을 가져오기 때문에 값 변경이 안된다. 그래서 api를 써야한다.
    - image객체의 src를 설정하는 것만으로도 이미지를 로드 한다.
    - 서로 다른 출처 스크립트 간의 메시지 교환 postMessage() onmessage()
    - 멀티쓰레드 웹워커

함수들
    - propertyIsEnumerable() : 해당 속성이 객체의 속성(상속받은 것 제외)이고 열거할수 있을경우
    - Object.keys() : 프로퍼티 이름을 배열로 반환(열거할수 있는것만,프로토타입 제외)
    - Object.getOwnPropertyNames() : 프로퍼티 이름을 배열로 반환(ALL,프로토타입 제외)
    - Object.defineProperty(객체,속성,설정) : 속성의 읽기, 열거, 수정(프로토타입은 수정 안됨)
    - Object.getPrototypeOf, object.isPrototypeof : 객체의 프로토 타입을 검사한다.
    - Object.isExtensible : 객체가 확장 가능한지 검사
    - Object.preventExtensible : 객체 확장 못하게 만든다.
    - Obejct.seal : 객체 확장 불가, 설정 변경 불가, writable true값 변경 가능
    - Object.freeze : 객체 확장 불가, 설정 변경 불가, 값 변경 불가능, setter를 통해서는 값변경 가능
    - map() : 배열요소들을 모두 함수로 돌려서 결과 배열 반환
    - filter() : flag값을 리턴해 true인 배열요소만 반환
    - every() : 함수의 조건식에 대한 배열 모든 요소가 true면 true 반환
    - some() : 함수의 조건식에 대해 모든 요소가 true거나 false 거나 하면 안됨
    - reduce() : 배열 요소를 함수를 통해 하나의 값으로 변환
    - reduceRight() : reduce의 반대 방향으로
    - indexOf(1), lastIndexOf(2) : 배열 요소값 반환 시작순서만 다름
    - f.bind(o) : o 객체에 f 함수를 속성으로 추가하고 그함수를 o.f(x)로 실행한다. 매개변수를 몇개 미리 바인딩할수 있다
