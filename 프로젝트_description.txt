1. 해쉬태그 에디터
    - bindHashtagEditor 함수를 통해 적용할 dom객체와 옵셥값을 받는다.
    - Dom은 DIV와 textarea만 가능하다.
    - 전달된 dom을 container로 HashTagEditor객체를 생성후 연결하고 초기화한후 HashTagEditor 객체를 배열에 담아 리턴한다.
    - 이 리턴된값을 통해 focus라는 함수와 setTextvalue라는 함수가 사용 가능하다.
    - 옵션값을 통해서 랩핑되는 돔의 class 변경이 가능하다.
    - 빈줄일 경우 ie는 "" 문자를 그외 브라우저는 <br>을 삽입한다.
      아무것도 없는 빈 dom안에서는 커서를 잡지 못하는 이슈가 생긴다. ie는 제외
    - placeholder 옵션값이 있다.
    - DIV일 경우 contenteditable 속성만 설정해주고
      textarea일 경우 새로운 contenteditble div 객체를 만들고 textarea의 스타일을 복사한다.
      그후에 textarea는 display:none 처리 한다.
    - initLines 함수를 통해 초기구조를 만든다.
      기본구조는 라인<div></div> 일반 텍스트의 span , 해쉬태그의 span이 있다.
    - 에디터에 초기값이 있을경우 에디터는 3가지 스타일 데어터가 적용 가능하다.
        ㄱ. 에디터 그대로 dom 구조를 가지고 있는 데이터
        ㄴ. 일반 텍스트 이고 개행이 <br/>구분된 데이터
        ㄷ. 일반 텍스트 이고 개행이 \n으로 구분된 데이터
    - 에디터에서 setTextValue(3)를 통해 에디터의 내용을위와 같이 3가지 형식으로 꺼내올수 있다.
    - 키입력이 될때마다 정규식(#뒤에 특수문자나 공백이 아닌것들)에 따라 일반태그와 해쉬태그 텍스트가 span태그로 구분되어 랩핑된다.
    - 기본적으로 랩핑은 한줄씩 실행되며 엔터같은 경우에는 두줄이 된다.(이전줄, 현재줄)
    - 2바이트 언어는 한자리에서 여러번 입력하기 때문에 키입력시마다 랩핑을 하게 되면 커서의 포커스가 없어져 입력이 중단된다.
      그래서 키입력시가 아닌 커서가 이동될때마다 랩핑을 실시 한다.
    - 에디터에 이벤트를 걸어준다. 에디터이기 때문에 다양한 키입력에 대한 분기가 되야 한다.
    - mouseup : placeholder가 있을경우 삭제하고 포커스를 잡아준다.
    - keydown 에서는 현재 커서위치를 저장하고
      지금 조합키(쉼프트홈같은)인지 체크를 한다. 그리고 스페이스일 경우에는 공백을 &nbsp;로 만들고 리턴한다.(파이어폭스 문제)
      그리고 계속 누르고 있는경우는 백프로 커서 이동이기 때문에 텍스트를 랩핑한다.
    - keyup에서 입력된 문자가 화면에 출력되므로 커서 이동유무를 알수 있다.
      커서가 이동했다면 텍스트 랩핑을 시도 한다. 하지만 조합키일 경우에는 하지 않는다.
    - 커서이동 종류를 3가지로 구분한다.
      엔터
        다른 브라우저는 엔터를 칠경우 엔터가 실행된 돔의 구조를 다음줄에 그대로 적용시켜 준다. 그래서 이전줄과 새로생긴 줄에 대한 랩핑과정만 하면 된다.
        하지만 파이어폭스는 개행을 br로 처리하기 때문에 split을 통해 구분한후 라인돔구조를 생성해 삽입하여 준다.
      백스페이스
        백스페이스의 경우
        아무내용이 없는 상태에서 실행되거나 할때 라인 dom 구조가 삭제되고 무너질 경우가 있어
        돔구조를 재생성 해 준다.
      텍스트 입력
        기존 방법으로 랩핑한다.
     - 붙여넣기 이벤트
        window.clipboardData.getData('Text')를 통해 붙여넣기 텍스트를 가져온다.
        붙여오는 텍스트가 여러줄일 경우 사용자의 기대 심리에 따라 첫줄의 내용은 커서가 잡힌곳에 붙여 넣어 지고
        나머지는 개행되어 붙여넣어진다.
        처음 커서가 텍스트 중간일 경우 커서 다음 부분은 붙여넣어진 텍스트의 보다 밑으로 내려 간다.
     - 라인 수가 증가할 때 텍스트 에디터 height 증가

2. 채팅
    - 아티스트와 채팅 기능 (아티스트 1명, 사용자 150명)
    - 1초마다 아작스를 통해 대화 데이터를 가지고옴
    - 글 도배 금지와 사용자가 많기 때문에 30초 카운트 다운 기능으로 사용자 입력 제한
    - 새로운 글이 나올때마다 채팅리스트 자동으로 스크롤 최하단 이동
    - 사용자가 채팅리스트 스크롤을 이동할 경우에는 자동 스크롤 최하단 기능 off
    - 사용자가 글을 입력할경우 채팅리스트에 글이 보여지고 최하단 스크롤 이동 기능 on
    - 이모티콘 입력 가능
    - 채팅창 상단에 화살표를 누르면 아티스트 글만 볼수 있는 조그마한 창이 뜨는 기능이 생김

3. 이미지 크롭
    - 크롭할 이미지를 크롭 영역에 넘치지 않게 배치해줍니다.
    - 리사이즈를 위한 툴 dom구조 로 이미지를 랩핑합니다.
    - Ie9는 크로스 도메인 문제로 canvas에서 (아마존 클라우드) 이미지 사용이 안되서 이미지는 ImageData :base64로 인코딩하여 사용
    - 캔바스가 생각보다 동작이 느려서 파이어폭스에서 그래서 이미지 확대/축소 이동은 dom css를 변경함
    - 가운데 빨간 박스가 크롭될 영역이고
    - 마우스 이벤트에 따라 이미지를 확대 및 이동이 가능합니다.
    - 마우스 이동 제한을 겁니다. 이미지가 크롭영역에 빈자리가 업이 위치 해야 합니다.
    - 크롭을 실행하면 크롭영역 크기의 캔바스를 만들고 지금 화명에 보이는대로 이미지를 배치하여 캔바스 toDataURL함수를 사용하여
      서버에 전달한다.

4. 스킨설정
    - 스킨설정 tool dom이 반응형이기 때문에 브라우저 크기에 따라 tool 크기가 변한다.
    - 스킨설정시 마우스로 이미지 이동이 가능하며 이미지 이동은 공백이 생길수 없게 상하좌우에 제한이 걸려있다.
    - 확대축소툴을 사용하여 이미지를 확대 축소 할수 있다.
    - 브라우저 크기에 따라 변한 UI와 상관 없이 고정 1920 * 484로 캔바스를 작성하여 이미지를 같은 비율로 캔바스에 비치하여 크롭한다.

5. 모바일 터치 이미지 슬라이더
    - 기기 별로 터치 이벤트명 분기(MsPointer Down, touchstart)
    - 속도 최적화를 위해 transform을 이용해 돔 레이아웃 이동
    - 써클 dom을 만들어 append 한다. 이미지의 인덱스를 알려준다.
    - 이미지가 로테이션 기능이 있기 때문에 양쪽끝에 처음,끝 이미지를 하나씩 복사한다.
    - 터치가 시작된 부분과 터치가 움직이는 부분의 가로 세로 값을 구하여 가로값이 클경우 이미지 슬라이더 동작으로 구분한다.
    - 가로값과 세로값이 10미만일때는 동작하지 않는다.(스크롤 동작과 충돌 날수 있음)
    - 터치로 이동한만큼 이미지가 움직이며 손가락을 땠을때 일정 크기이상 움직였다고 판단되면 이미지가 전환되고 아닐경우 본래 이미지 위치로 돌아온다.
    - 이미지 이동으로 인한 애니메이션 중에는 슬라이더 이벤트 기능이 중단된다.
    - 만약 0에서 마지막 이미지로 움직일 경우 왼쪽으로 이동이 멈추면 원래 마지막 인덱스값 위치로 바꾼다.
    - 화면 전환 orientation 경우 이미지 크기 및 위치 재배치
    - 테블릿 같은 경우 가로길에 맞추면 세로가 너무 길어지므로 최대 가로 길이 설정되 있음

6. 스크롤 이미지 로딩
    - 서버에서 스마트에디터를 통해 내용을 입력한다.
    - 서버에서 이미지 태그의 src를 지우고 data-bsrc에 값을 넣어주고 width값과 height값도 dataset속성으로 넣어준다.
    - img태그를 for문으로 돌리며
        span 태그를 만듬
        img의 width, height 만큼 span태그를 display:block으로 바꾼후 크기를 맞춰 주며
        백그라운드로 로딩전 이미지를 보여준다. 쇼핑몰 로고
        그리고 배열에 스팬태그가 위치한 곳의 offset Top 위치를 저장한다.
    - 스크롤을 할때 스크롤 값과 스크린 height 값을 더한것보다 작은 offsetTop을 가진 span태그는 이미지 태그에 src를 바꾸고
      display:block하여 이미지를 로드한다. 그리고 span 은 삭제한다.
    - 스크롤 할때마다 배열을 다 돌게 될경우 실행시간이 많이 길어지기 때문에
      이미 로드된 이미지의 인덱스를 배열 for문의 start 인덱스로 만든다.
    - 이문제를 처음에는 scrollstart와 end를 체크하여 구분하려 했지만, ios에서는 스크롤 스타트가 없다.
    - 화면 전환 orientation 경우등 브라우저 크기가 변할 경우에는 이미지 offsetTop과 width값 변환에 따른 height값을 새로 다 셋팅해준다.

7. 비대칭 이미지 슬라이더
    - 옵션값을 통해 가로 스크롤바를 생성할건지 dot 을 선택할것인지 정할수 있습니다.
    - 옵션값을 통해 로테이션기능을 추가 할수 있습니다.
    - 옵션값을 통해 자동이동기능을 추가 할수 있습니다.
    - 이미지 로드에 실패할 경우 대체 이미지를 삽입합니다.
    - 이미지를 for문을 돌립니다.
        이미지를 최소크기와 최대크기의 사이에 이미지 비율을 유지하며 크기를 조정합니다.
        이미지를 가로로 정해진 간격으로 배치합니다.
        이미지의 시작지점, 중간지점을 배열에 저장합니다. 각각 다른 배열에 저장합니다.
    - 이전 다음 이미지로 이동할경우 중간지점 배열에 저장된 위치 값으로 translate로 이동합니다.
    - 스크롤바에는 현재 이미지 번호가 노출됩니다.
      그래서 마우스 드래그로 이동할경우 시작지점 위치가 바뀌는 것을 시작지점 배열로 계속 체크하여 아래 숫자카운트를 변경해 줍니다.
    - 이미지 로테이션 기능이 있을 경우 브라우저의 가로 크기를 간음할수 없고, 이미지의 크기도 제각각이여
      이미지 리스트를 복사하여 앞뒤로 붙여줍니다. 총 3배로 늘어납니다.
      원래 보통 마지막일경우 처음이미지만 오른쪽에 나오는데 이미지가 작을 경우 2~3개 까지도 나올수 있습니다.
      이동 애니메이션을 보여준후 원래(가운대 원본) 자리로 돌아옵니다.
    - 가로스크롤은 드래그로 이동이 가능합니다.

8. 가상키보드
    - 일본어 히라가나, 카타가나의 유니코드를 배열에 미리 저장해놓습니다.
    - 자바스크립트로 키보드 모양 UI를 만듭니다.
    - 키보드는 가타가나,히라가나로 변환이 가능합니다.
    - 키보드는 마우스 드래그로 위치를 움직일수 있습니다.
    - 키보드는 문자를 클릭하면 summernote 에디터의 커서 포지션을 체크하여 그부분에 일본어를 입력해줍니다.
    - 키보드를 클릭하면 summernote 에디터의 포커스를 잃기 때문에 항상 커서 포지션을 먼저 저장하고
      클릭 기능 구현후 포커스와 포지션을 원상복귀 합니다.

9. 마이발렛 관리자
    - 로컬에서는  minify안된 여러개의 보통파일로 작업합니다.
    - 배포시에는
    - grunt를 less를 css로 빌드한다.
    - css와 script를 minify하고 각각 하나의 파일로 통합한다.
    - gulp를 통해 로컬 index.html의 소스 부분의 css,js목록들을 minify한 css와 js로 교체합니다.
    - 그렇게 교체된 파일을 .dist폴더에 저장하고 이파일을 서버에 올립니다.
    - angularjs의 좋앗던점
      - 뷰와 컨트롤러의 확실한 구분이 되어져서 좋았다.
      - ng-class와 ng-show등 데이터의 따른 화면 변화가 변수 변경만으로 아주 쉽게 구현 되었다.
      - for문을 통해 돔을 반복할수 있어 html 작성량이 줄었고, 예전 서버에서 담당하던 부분이라 수정시
        서로 커뮤니케이션 비용이 있었는데, 데이터만 있으면 필터등을 동해 언제든지 프론트 엔드 변경을 쉽게 할수 있었다.
      - 싱글어플리케이션이라 처음에는 모든 페이지의 컨트롤러 소스등을 방아 오므로 로딩이 조금 느린면은 있었지만,
        lazy로드 어느정도 해결하였고, 로딩후에는 페이지 전환이 더 빠르다. 필요한 부분만 다운 받으면 되니까.

      - charjs를 통해 막대 그래프와 선그래프를 구현하였고,
        도넛 그래프에서는 20프로가 넘는 부분은 자동라벨 표현이 되게 chartjs를 확장하였다.
        Chart.pluginService.register를 통해
        마우스 오버때매 라벨이 그려지는데 그부분을 20프로가 넘는 경우는 항상 그려지게 소스 오버라이딩

12. japan sumstore
    - 메인창의 이미지번호를 주소창의 #인덱스와 동일하게 맞추며 히스토리를 추가한다.
    - 상품을 보고 이전페이지 페이지를 갈 경우 해당 이미지로 이동이 된다.
    - 마우스 휠을 움직이면 메인이미지가 순서대로 이동하고 해당 상품의 카테고리 이동 버튼이 노출된다.
    - 현재 이미지에 대한 인덱스 프로그래스바가 있다.
    - 상품 마우스 오버시 생동감있게 확대 된다. transform scale 사용
    - faq/공지사항 글의 제목을 누르면 그 글이 최상단에 위치할수있게 자동으로 스크롤이 이동한다.

13. preorder sumstore
    - 하나의 인터발이 계속 돌면 상품들을 카운트 다운 합니다.
    - 카운트 다운은 2가지 종류가 있습니다. 서버에서 남은시간을 줄경우가 있고요. 마감시간을 주는 경우가 있습니다.
    - 만약 우리나라 12시에 마감일 경우
        date 함수의 getTimezoneOffset();를 사용합니다.
        우리나라는 540이니 540-getTimezoneOffset을 현재 시간에 더해 줍니다.
        영국일 경우 -540이 나오니 우리나라 보다 9시간 늦은 시간으로 표시 되어 카운트 시간이 같아집니다.

14. HR
    - jquery autcomplete를 선언할때 create이벤트에 직접입력하기 팝업을 만들어 줍니다.
    - response 이벤트에 검색되는 결과가 없을경우 이 팝업이 보여지게 합니다.
    - 직접입력하기를 할경우 autoCompDirect 속성을 true로 바꿔 검색 결과가 없어도 팝어이 뜨지 않습니다.

15. FANBOOK
    히스토리
        - 레이어팝업을 열때마다 history.pushState에 해달 레이어 다이렉트 주소를 저장한다.
        - 히스토리 백을 할경우 해당 url path에서 인덱스를 꺼내와 이미지를 다시 아작스로 로드해 준다.
        - 여러번 누를 경우 충돌을 대비해 path 다른 이미지의 통신은 버려진다.
        - 레이어팝업에서 prev, next 버튼을 이동할때 마다 스크롤로 레이어 밑의 그리드의 위치를 맞춰준다.
        - 히스토리로 푸쉬된 url들은 페이지이동후에 히스토리 백으로 이동할 경우 저장된 정보가 없어 주소창의 주소만 바뀌는데
          그때 수동으로 페이지 전환을 해주어야 한다.

    드래그앤드랍
        - drag api
        - 드래그에 기본이벤트와 버블링 삭제
        - 드래그 해서 해당 객체 올리면 해당객체의 보더가 점선으로 변하여 사용자 인식가능하게 함
        - e.originalEvent.dataTransfer.files배열을 이용하여 ajax form submit으로 보낸다.
        - 파일갯수를 정해놓아서 오버될 경우 경고메시지를 보낸다.

    Pahael(svg 라이브러리)를 통한 선 그래프 에니메이션
        - 데이터를 받아온후 x축값과 y축값을 구현
        - y값 구현시 기준
            최소와 최대를 구한후 최상단과 최하단에 그값을 배치후 그사이값은 높이값으로 나누어 px당 값을 계산한다.
            라파엘의 라인 좌표는 상단이 기준이므로 받아온 값은 bottom 기준이므로
            그래프 하이트에 값을 빼서 탑기준 값으로 변경한다.
        - 인터발을 돌면서 라인을 조금씩 그려나간다.
        - 라인을 그리며 해당 좌표에서는 점을 그리고 수치를 표시해준다.
        - 라인에 이벤트를 걸어 클릭할경우 다른 라인의 오퍼시티가 줄어 겹치는 그래프 부분에서 서로 구분이 가능하게 했다.

16. 스타티져, 유지보수
    오디션
        - 서버에 오디션지역추가
            서버콘트롤러 추가 xml추가등
    스타홈
        - 동영상 배경 반복
            크롬의 경우 mp4는 반복시 중단되는 경우가 발생해 webm과 mp4를 둘다 준비한다.
            videojs 사용했고 ie8은 html5shiv를 사용해야 videojs가 잘돌아간다.
        - 인터발을 통한 그래픽 에니메이션
        - 카운트다운